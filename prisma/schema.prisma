generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @unique
  email          String?        @unique
  phone          String?        @unique
  hashedPassword String
  role           UserRole
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  avatarUrl      String?
  admin          Admin?
  doctor         Doctor?
  notifications  Notification[]
  patient        Patient?
  pharmacy       Pharmacy?
  sessions       Session[]

  @@index([email])
  @@index([phone])
}

model Admin {
  id          String    @id @default(cuid())
  userId      String    @unique
  name        String
  phone       String?
  department  String?
  permissions Json?
  lastLogin   DateTime?
  user        User      @relation(fields: [userId], references: [id])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Patient {
  id             String          @id @default(cuid())
  userId         String          @unique
  name           String
  phone          String?
  address        String?
  dateOfBirth    DateTime?
  bloodGroup     String?
  appointments   Appointment[]
  medicalRecords MedicalRecord[]
  user           User            @relation(fields: [userId], references: [id])
}

model Doctor {
  id                String          @id @default(cuid())
  userId            String          @unique
  name              String
  phone             String?
  specialization    String?
  qualification     String?
  experience        Int?
  about             String?
  licenseNo         String?         @unique
  aadhaarNo         String?         @unique
  documents         Json?
  address           String?
  avatarUrl         String?
  createdAt         DateTime        @default(now())
  consultationFee   Float?
  isVerified        Boolean         @default(false)
  verificationDate  DateTime?
  verificationNotes String?
  appointments      Appointment[]
  chambers          Chamber[]
  user              User            @relation(fields: [userId], references: [id])
  medicalRecords    MedicalRecord[]
}

model Pharmacy {
  id           String        @id @default(cuid())
  userId       String        @unique
  name         String
  businessName String?
  phone        String?
  address      String?
  location     Json?
  gstin        String?
  tradeLicense String?
  documents    Json?
  avatarUrl    String?
  createdAt    DateTime      @default(now())
  appointments Appointment[]
  chambers     Chamber[]
  user         User          @relation(fields: [userId], references: [id])
}

model Chamber {
  id                String        @id @default(cuid())
  doctorId          String
  pharmacyId        String
  startTime         String
  endTime           String
  fees              Float
  isActive          Boolean       @default(true)
  maxSlots          Int
  slotDuration      Int
  isVerified        Boolean       @default(false)
  verificationDate  DateTime?
  verificationNotes String?
  createdAt         DateTime      @default(now())
  isRecurring       Boolean       @default(true)
  scheduleType      ScheduleType
  weekNumbers       WeekNumber[]
  weekDays          WeekDay[]
  appointments      Appointment[]
  doctor            Doctor        @relation(fields: [doctorId], references: [id])
  pharmacy          Pharmacy      @relation(fields: [pharmacyId], references: [id])

  @@index([isVerified])
}

model Appointment {
  id            String            @id @default(cuid())
  patientId     String
  doctorId      String
  pharmacyId    String
  chamberId     String
  date          DateTime
  status        AppointmentStatus @default(PENDING)
  paymentStatus PaymentStatus     @default(PENDING)
  paymentMethod PaymentMethod
  amount        Float
  createdAt     DateTime          @default(now())
  slotNumber    Int
  chamber       Chamber           @relation(fields: [chamberId], references: [id])
  doctor        Doctor            @relation(fields: [doctorId], references: [id])
  patient       Patient           @relation(fields: [patientId], references: [id])
  pharmacy      Pharmacy          @relation(fields: [pharmacyId], references: [id])
  medicalRecord MedicalRecord?
}

model MedicalRecord {
  id            String      @id @default(cuid())
  appointmentId String      @unique
  patientId     String
  doctorId      String
  diagnosis     String
  prescription  String
  notes         String?
  createdAt     DateTime    @default(now())
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  doctor        Doctor      @relation(fields: [doctorId], references: [id])
  patient       Patient     @relation(fields: [patientId], references: [id])
}

enum NotificationType {
  APPOINTMENT_BOOKED
  APPOINTMENT_CANCELLED
  APPOINTMENT_COMPLETED
  MEDICAL_RECORD_ADDED
  PAYMENT_RECEIVED
  GENERAL
}

enum UserRole {
  PATIENT
  DOCTOR
  PHARMACY
  ADMIN
  OFFICE_MANAGER
}

enum ScheduleType {
  WEEKLY_RECURRING
  MONTHLY_SPECIFIC
  CUSTOM_DATES
  MULTI_WEEKLY
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
}

enum PaymentMethod {
  ONLINE
  CASH
}

enum WeekNumber {
  FIRST
  SECOND
  THIRD
  FOURTH
  LAST
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
